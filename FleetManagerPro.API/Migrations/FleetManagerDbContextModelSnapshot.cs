// <auto-generated />
using System;
using FleetManagerPro.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FleetManagerPro.API.Migrations
{
    [DbContext(typeof(FleetManagerDbContext))]
    partial class FleetManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FleetManagerPro.API.Models.DriverAttendance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("check_in_time");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("check_out_time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DriverId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("driver_id");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<decimal?>("OvertimeHours")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("overtime_hours");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalHours")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_hours");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("work_date");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("driver_attendance", (string)null);
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.LeaveRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("approved_at");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("approved_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DriverId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("driver_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<int>("LeaveType")
                        .HasColumnType("int")
                        .HasColumnName("leave_type");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("longtext")
                        .HasColumnName("rejection_reason");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int")
                        .HasColumnName("total_days");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("DriverId");

                    b.HasIndex("UserId");

                    b.ToTable("leave_requests", (string)null);
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.MaintenanceRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("cost");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("due_date");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("maintenance_date");

                    b.Property<DateTime?>("NextDueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("next_due_date");

                    b.Property<string>("PerformedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("performed_by");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("vehicle_id");

                    b.Property<string>("VehiclePlate")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("vehicle_plate");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("maintenance_records", (string)null);
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.Route", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<double?>("DistanceKm")
                        .HasColumnType("double");

                    b.Property<string>("EndLocation")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("EstimatedDurationHours")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("StartLocation")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("routes", (string)null);
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.RouteOptimization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DistanceSaved")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("distance_saved");

                    b.Property<decimal>("FuelSaved")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("fuel_saved");

                    b.Property<string>("OptimizationAlgorithm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("optimization_algorithm");

                    b.Property<DateTime>("OptimizedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("optimized_at");

                    b.Property<string>("OptimizedBy")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("optimized_by");

                    b.Property<decimal>("OptimizedDistance")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("optimized_distance");

                    b.Property<int>("OptimizedDuration")
                        .HasColumnType("int")
                        .HasColumnName("optimized_duration");

                    b.Property<decimal>("OriginalDistance")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("original_distance");

                    b.Property<int>("OriginalDuration")
                        .HasColumnType("int")
                        .HasColumnName("original_duration");

                    b.Property<string>("RouteId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("route_id");

                    b.Property<int>("TimeSaved")
                        .HasColumnType("int")
                        .HasColumnName("time_saved");

                    b.HasKey("Id");

                    b.HasIndex("OptimizedBy");

                    b.HasIndex("RouteId")
                        .IsUnique();

                    b.ToTable("route_optimizations", (string)null);
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.RouteStop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ActualArrival")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("actual_arrival");

                    b.Property<DateTime?>("ActualDeparture")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("actual_departure");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("contact_phone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DeliveryInstructions")
                        .HasColumnType("longtext")
                        .HasColumnName("delivery_instructions");

                    b.Property<DateTime?>("EstimatedArrival")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("estimated_arrival");

                    b.Property<DateTime?>("EstimatedDeparture")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("estimated_departure");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("RouteId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("route_id");

                    b.Property<int>("ServiceTime")
                        .HasColumnType("int")
                        .HasColumnName("service_time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StopOrder")
                        .HasColumnType("int")
                        .HasColumnName("stop_order");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("route_stops", (string)null);
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CurrentVehicleId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("current_vehicle_id");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("EmergencyContact")
                        .HasColumnType("longtext")
                        .HasColumnName("emergency_contact");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int")
                        .HasColumnName("experience_years");

                    b.Property<bool>("HasHelper")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_helper");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("hire_date");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_available");

                    b.Property<decimal?>("LastLocationLat")
                        .HasColumnType("decimal(10,8)")
                        .HasColumnName("last_location_lat");

                    b.Property<decimal?>("LastLocationLng")
                        .HasColumnType("decimal(11,8)")
                        .HasColumnName("last_location_lng");

                    b.Property<DateTime?>("LastLocationUpdated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_location_updated");

                    b.Property<string>("LicenseClass")
                        .HasColumnType("longtext")
                        .HasColumnName("license_class");

                    b.Property<DateTime?>("LicenseExpiry")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("license_expiry");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("license_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("profile_image_url");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role");

                    b.Property<decimal?>("SafetyRating")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("safety_rating");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalMilesDriven")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("total_miles_driven");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CurrentVehicleId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_id");

                    b.Property<string>("Color")
                        .HasColumnType("longtext")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CurrentDriverId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("current_driver_id");

                    b.Property<decimal?>("CurrentLocationLat")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("current_location_lat");

                    b.Property<decimal?>("CurrentLocationLng")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("current_location_lng");

                    b.Property<decimal>("CurrentMileage")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("current_mileage");

                    b.Property<decimal?>("FuelCapacity")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("fuel_capacity");

                    b.Property<decimal>("FuelLevel")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("fuel_level");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("fuel_type");

                    b.Property<DateTime>("InsuranceExpiry")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("insurance_expiry");

                    b.Property<string>("InsurancePolicy")
                        .HasColumnType("longtext")
                        .HasColumnName("insurance_policy");

                    b.Property<DateTime?>("LastLocationUpdated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_location_updated");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("license_plate");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("make");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("model");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("purchase_date");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("purchase_price");

                    b.Property<DateTime>("RegistrationExpiry")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("registration_expiry");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrentDriverId");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.VehicleCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("vehicle_categories", (string)null);
                });

            modelBuilder.Entity("route_users", b =>
                {
                    b.Property<string>("route_id")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("route_id");

                    b.Property<string>("user_id")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("user_id");

                    b.HasKey("route_id", "user_id");

                    b.HasIndex("user_id");

                    b.ToTable("route_users", (string)null);
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.DriverAttendance", b =>
                {
                    b.HasOne("FleetManagerPro.API.Models.User", "Driver")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.LeaveRequest", b =>
                {
                    b.HasOne("FleetManagerPro.API.Models.User", "ApproverUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FleetManagerPro.API.Models.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FleetManagerPro.API.Models.User", null)
                        .WithMany("LeaveRequests")
                        .HasForeignKey("UserId");

                    b.Navigation("ApproverUser");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.MaintenanceRecord", b =>
                {
                    b.HasOne("FleetManagerPro.API.Models.Vehicle", "Vehicle")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.Route", b =>
                {
                    b.HasOne("FleetManagerPro.API.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.RouteOptimization", b =>
                {
                    b.HasOne("FleetManagerPro.API.Models.User", "OptimizedByUser")
                        .WithMany()
                        .HasForeignKey("OptimizedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FleetManagerPro.API.Models.Route", "Route")
                        .WithOne("Optimization")
                        .HasForeignKey("FleetManagerPro.API.Models.RouteOptimization", "RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptimizedByUser");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.RouteStop", b =>
                {
                    b.HasOne("FleetManagerPro.API.Models.Route", "Route")
                        .WithMany("Stops")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.User", b =>
                {
                    b.HasOne("FleetManagerPro.API.Models.Vehicle", "CurrentVehicle")
                        .WithMany()
                        .HasForeignKey("CurrentVehicleId");

                    b.Navigation("CurrentVehicle");
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.Vehicle", b =>
                {
                    b.HasOne("FleetManagerPro.API.Models.VehicleCategory", "Category")
                        .WithMany("Vehicles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FleetManagerPro.API.Models.User", "CurrentDriver")
                        .WithMany()
                        .HasForeignKey("CurrentDriverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("CurrentDriver");
                });

            modelBuilder.Entity("route_users", b =>
                {
                    b.HasOne("FleetManagerPro.API.Models.Route", null)
                        .WithMany()
                        .HasForeignKey("route_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FleetManagerPro.API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.Route", b =>
                {
                    b.Navigation("Optimization");

                    b.Navigation("Stops");
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.User", b =>
                {
                    b.Navigation("AttendanceRecords");

                    b.Navigation("LeaveRequests");
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.Vehicle", b =>
                {
                    b.Navigation("MaintenanceRecords");
                });

            modelBuilder.Entity("FleetManagerPro.API.Models.VehicleCategory", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
